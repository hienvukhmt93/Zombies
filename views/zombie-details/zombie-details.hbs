<link rel='stylesheet' href='/stylesheets/style.css' />
<svg class="container" id="loading" class="lds-spinner" width="200px" height="200px" xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" style="background: none;">
    <g transform="rotate(0 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.9166666666666666s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(30 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.8333333333333334s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(60 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.75s" repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(90 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.6666666666666666s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(120 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5833333333333334s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(150 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5s" repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(180 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.4166666666666667s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(210 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.3333333333333333s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(240 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.25s" repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(270 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.16666666666666666s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(300 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.08333333333333333s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(330 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="0s" repeatCount="indefinite"></animate>
        </rect>
    </g>
</svg>
<div id="content" class="wrapper">
    <div id="zombie-preview" class="zombie-preview">
        <img id="head" class="head" alt="">
        <img id="eyes" class="eyes" alt="">
        <img id="mouth" class="mouth" alt="">
        <img id="shirt" class="shirt" alt="">
        <img id="left-upper" src="/images/zombieparts/left-upper-arm-1@2x.png" class="left-upper" alt="">
        <img id="right-upper" src="/images/zombieparts/right-upper-arm-1@2x.png" class="right-upper" alt="">
        <img src="/images/zombieparts/left-forearm-1@2x.png" class="left-forearm" alt="">
        <img src="/images/zombieparts/right-forearm-1@2x.png" class="right-forearm" alt="">
        <img src="/images/zombieparts/hand1-1@2x.png" class="hand1" alt="">
        <img src="/images/zombieparts/hand-2-1@2x.png" class="hand2" alt="">
        <img src="/images/zombieparts/catlegs.png" class="catlegs" alt="">
        <div class="zombie-name">
            <div id="zombieName" class="name">Im Zombie</div>
            <hr>
            <div id="zombieLevel" class="level">Lv: 25</div>
        </div>
    </div>
    <div class="zombie-create">
        <div class="form-group">
            <label for="usr">Detail :</label>
            <input type="text" class="form-control" id="usr" placeholder="Zombie detail">
            <button type="button" onclick="letCombat();" class="btn btn-success btn-block">Let combat</button>
        </div>
    </div>
</div>

<script>

    function show() {
        document.getElementById("loading").style.display = "block";
        document.getElementById("content").style.display = "none";
    }
    document.addEventListener('DOMContentLoaded', function () {
        show();
        setTimeout(function () {
            document.getElementById("loading").style.display = "none";
            document.getElementById("content").style.display = "block";
        }, 2000);
    }, false);
    function letCombat() {
        $.get('/zombie-attack', (data) => {
            window.location.href = "/zombie-attack";
        });
    }
    window.addEventListener('load', function () {
        var web3js = new Web3(web3.currentProvider);
        var cryptZombies = new web3js.eth.Contract(abi, contractAdress, {
            from: address1,
            data: data
        });
        var account = localStorage.getItem('account');
        console.log(account !== localStorage.getItem('account'));
        if (account !== localStorage.getItem('account')) {
            account = localStorage.getItem('account');
            window.location.href = '/zombie-details';
        }
        getZombiesByOwner(account, cryptZombies, (hash) => {
            console.log("nulll zombies", hash)
            console.log(hash.length == 0);
            if (hash.length == 0) {
                window.location.href = "/create-random-zombie"
            } else {
                displayZombies(hash, cryptZombies);
            }

        });

    });
    function displayZombies(ids, cryptoZombies) {
        for (id of ids) {
            // Look up zombie details from our contract. Returns a `zombie` objec
            getZombieDetails(id, cryptoZombies, (hash) => {
                console.log("52", hash);
                console.log("54", hash.dna);
                var result = hash.dna;
                var head = (result.substring(0, 2) % 7) + 1;
                var eyes = (result.substring(2, 4) % 11) + 1;
                var mouth = (result.substring(4, 6) % 2) + 1;
                var shirt = (result.substring(6, 8) % 6) + 1;
                var left_upper = (result.substring(8, 10));
                var right_upper = (result.substring(10, 12));
                $("#head").attr("src", "/images/zombieparts/head-" + head + "@2x.png");
                $("#eyes").attr("src", "/images/zombieparts/eyes-" + eyes + "@2x.png");
                $("#mouth").attr("src", "/images/zombieparts/mouth-" + mouth + "@2x.png");
                $("#shirt").attr("src", "/images/zombieparts/shirt-" + shirt + "@2x.png");
                $("#zombieName").text(hash.name);
                $("#zombieLevel").text(hash.level)
            });
        }
    }

    function getZombieDetails(id, cryptoZombies, hash) {
        cryptoZombies.methods.zombies(id).call(function (err, result) {
            hash(result);
        });
    }

    function zombieToOwner(id, cryptoZombies) {
        return cryptoZombies.methods.zombieToOwner(id).call()
    }

    function getZombiesByOwner(owner, cryptoZombies, hash) {
        cryptoZombies.methods.getZombiesByOwner(owner).call(function (err, result) {

            hash(result);
        });
    }
</script>