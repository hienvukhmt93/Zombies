<link rel='stylesheet' href='/stylesheets/style.css' />
<svg class="container" id="loading" class="lds-spinner" width="200px" height="200px" xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid" style="background: none;">
    <g transform="rotate(0 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.9166666666666666s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(30 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.8333333333333334s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(60 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.75s" repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(90 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.6666666666666666s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(120 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5833333333333334s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(150 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.5s" repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(180 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.4166666666666667s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(210 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.3333333333333333s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(240 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.25s" repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(270 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.16666666666666666s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(300 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.08333333333333333s"
                repeatCount="indefinite"></animate>
        </rect>
    </g>
    <g transform="rotate(330 50 50)">
        <rect x="47" y="24" rx="9.4" ry="4.8" width="6" height="12" fill="#fcb711">
            <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="0s" repeatCount="indefinite"></animate>
        </rect>
    </g>
</svg>
<div id="content" class="wrapper">
    <div class="zombie-preview">
        <img src="/images/zombieparts/head-7@2x.png" class="head" alt="">
        <img src="/images/zombieparts/eyes-4@2x.png" class="eyes" alt="">
        <img src="/images/zombieparts/mouth-1@2x.png" class="mouth" alt="">
        <img src="/images/zombieparts/shirt-4@2x.png" class="shirt" alt="">
        <img src="/images/zombieparts/left-upper-arm-1@2x.png" class="left-upper" alt="">
        <img src="/images/zombieparts/right-upper-arm-1@2x.png" class="right-upper" alt="">
        <img src="/images/zombieparts/left-forearm-1@2x.png" class="left-forearm" alt="">
        <img src="/images/zombieparts/right-forearm-1@2x.png" class="right-forearm" alt="">
        <img src="/images/zombieparts/hand1-1@2x.png" class="hand1" alt="">
        <img src="/images/zombieparts/hand-2-1@2x.png" class="hand2" alt="">
        <img src="/images/zombieparts/catlegs.png" class="catlegs" alt="">
        <div class="zombie-name">
            <div class="name">Your's Zombie-Name</div>
            <hr>
            <div class="level">Level</div>
        </div>
    </div>
    <div class="zombie-create">
        <div class="form-group">
            <label for="usr">Zombie Name :</label>
            <input type="text" class="form-control" id="zombieName" placeholder="Typing Zombie-Name">
            <button type="button" onclick="btCreateZombie();" class="btn btn-success btn-block">Create Name</button>
        </div>
    </div>
</div>
<script>
    function show() {
        document.getElementById("loading").style.display = "block";
        document.getElementById("content").style.display = "none";
    }
    document.addEventListener('DOMContentLoaded', function () {
        show();
        setTimeout(function () {
            document.getElementById("loading").style.display = "none";
            document.getElementById("content").style.display = "block";
        }, 2000);
    }, false);

    window.addEventListener('load', function () {
        var account = localStorage.getItem('account');
        var web3js = new Web3(web3.currentProvider);
        var cryptZombies = new web3js.eth.Contract(abi, contractAdress, {
            from: address1,
            data: data
        });
        getZombiesByOwner(account, cryptZombies, (hash) => {
            console.log(hash.length);
            if (hash.length > 0) {
                window.location.href = "/zombie-details";
            }
        });
        cryptZombies.events.NewZombie()
            .on("data", function (event) {
                console.log(event);
                let zombie = event.returnValues;
                // We can access this event's 3 return values on the `event.returnValues` object:
                console.log("A new zombie was born!", zombie.zombieId, zombie.name, zombie.dna);
                window.location.href = "/zombie-details";
            }).on("error", console.error);
    })

    function createRandomZombie(name, account, contract, hashReceipt, hashError) {
        contract.methods.createRandomZombie(name).send({ from: account })
            .on("receipt", function (receipt) {
                hashReceipt(receipt);
            })
            .on("error", function (error) {
                hashError(error);
            });
        
    }

    function getZombiesByOwner(owner, cryptoZombies, hash) {
        cryptoZombies.methods.getZombiesByOwner(owner).call(function (err, result) {

            hash(result);
        });
    }

    function getZombieDetails(id, cryptoZombies, hash) {
        cryptoZombies.methods.zombies(id).call(function (err, result) {
            hash(result);
        });
    }

    function btCreateZombie() {
        var flag = false;
        var name = document.getElementById('zombieName').value;
        var input = document.getElementById("zombieName");
        if (name.length < 6) {
            flag = true;
            input.placeholder = "Name very short , can > 6";
        }
        var web3js = new Web3(web3.currentProvider);
        var cryptZombies = new web3js.eth.Contract(abi, contractAdress, {
            from: address1,
            data: data
        });

        var account = localStorage.getItem('account');
        createRandomZombie(name, account, cryptZombies, (receipt) => {
        }, (error) => {
        });
    }




</script>